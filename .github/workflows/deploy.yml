name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  APPLICATION_NAME: contact-us-backend
  ENVIRONMENT_NAME: contact-us-backend-dev

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Create deployment package
      run: |
        # Create a clean directory for deployment
        mkdir -p deploy-package
        
        # Copy necessary files
        cp -r models deploy-package/
        cp -r routes deploy-package/
        cp -r middlewares deploy-package/
        cp -r services deploy-package/
        cp -r public deploy-package/
        cp server.js deploy-package/
        cp package.json deploy-package/
        cp package-lock.json deploy-package/
        
        # Create .ebextensions directory for configuration
        mkdir -p deploy-package/.ebextensions
        
        # Create environment configuration
        cat > deploy-package/.ebextensions/environment.config << EOF
        option_settings:
          aws:elasticbeanstalk:application:environment:
            NODE_ENV: production
            PORT: 8080
          aws:elasticbeanstalk:container:nodejs:
            NodeCommand: "npm start"
          aws:elasticbeanstalk:container:nodejs:staticfiles:
            /public: public
        EOF
        
        # Create a zip file
        cd deploy-package
        zip -r ../application.zip . -x "*.git*" "node_modules/*" ".env*"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create Elastic Beanstalk Application and Environment
      run: |
        # Check if application exists
        if ! aws elasticbeanstalk describe-applications --application-names ${{ env.APPLICATION_NAME }} 2>/dev/null | grep -q ${{ env.APPLICATION_NAME }}; then
          echo "Creating Elastic Beanstalk application..."
          aws elasticbeanstalk create-application \
            --application-name ${{ env.APPLICATION_NAME }} \
            --description "Contact Us Backend Application"
          echo "✅ Application created successfully"
        else
          echo "✅ Elastic Beanstalk application already exists"
        fi
        
        # Check if environment exists
        ENV_STATUS=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ env.ENVIRONMENT_NAME }} \
          --query 'Environments[0].Status' \
          --output text 2>/dev/null || echo "NotFound")
        
        echo "Current environment status: $ENV_STATUS"
        
        if [ "$ENV_STATUS" = "NotFound" ]; then
          echo "Creating Elastic Beanstalk environment..."
          aws elasticbeanstalk create-environment \
            --application-name ${{ env.APPLICATION_NAME }} \
            --environment-name ${{ env.ENVIRONMENT_NAME }} \
            --solution-stack-name "64bit Amazon Linux 2023 v6.1.7 running Node.js 20" \
            --option-settings \
              Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t3.micro \
              Namespace=aws:elasticbeanstalk:environment,OptionName=EnvironmentType,Value=SingleInstance \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=NODE_ENV,Value=production \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=PORT,Value=8080
          
          echo "⏳ Waiting for environment to be ready (this may take several minutes)..."
          aws elasticbeanstalk wait environment-ready --environment-names ${{ env.ENVIRONMENT_NAME }}
          
          # Verify environment is ready
          FINAL_STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.ENVIRONMENT_NAME }} \
            --query 'Environments[0].Status' \
            --output text)
          
          if [ "$FINAL_STATUS" = "Ready" ]; then
            echo "✅ Environment created and ready for deployment"
          else
            echo "❌ Environment creation failed. Final status: $FINAL_STATUS"
            exit 1
          fi
        elif [ "$ENV_STATUS" = "Ready" ]; then
          echo "✅ Elastic Beanstalk environment already exists and is ready"
        else
          echo "⚠️ Environment exists but is not ready (status: $ENV_STATUS)"
          echo "⏳ Waiting for environment to become ready..."
          aws elasticbeanstalk wait environment-ready --environment-names ${{ env.ENVIRONMENT_NAME }}
          echo "✅ Environment is now ready"
        fi

    - name: Verify Environment Before Deployment
      run: |
        echo "🔍 Verifying environment exists and is ready..."
        ENV_STATUS=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ env.ENVIRONMENT_NAME }} \
          --query 'Environments[0].Status' \
          --output text 2>/dev/null || echo "NotFound")
        
        if [ "$ENV_STATUS" = "NotFound" ]; then
          echo "❌ Environment not found! Deployment cannot proceed."
          exit 1
        elif [ "$ENV_STATUS" != "Ready" ]; then
          echo "❌ Environment is not ready (status: $ENV_STATUS). Deployment cannot proceed."
          exit 1
        else
          echo "✅ Environment verified and ready for deployment"
        fi

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ env.APPLICATION_NAME }}
        environment_name: ${{ env.ENVIRONMENT_NAME }}
        region: ${{ secrets.AWS_REGION }}
        version_label: ${{ github.sha }}
        deployment_package: ./application.zip
        wait_for_environment_recovery: 300

    - name: Get Application URL
      run: |
        APP_URL=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ env.ENVIRONMENT_NAME }} \
          --query 'Environments[0].CNAME' \
          --output text)
        echo "Application deployed at: http://$APP_URL"
        echo "APPLICATION_URL=http://$APP_URL" >> $GITHUB_ENV

    - name: Health Check
      run: |
        sleep 60  # Wait for deployment to stabilize
        curl -f ${{ env.APPLICATION_URL }}/api/admin/health || echo "Health check endpoint not available yet"
